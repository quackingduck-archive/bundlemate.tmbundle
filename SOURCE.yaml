info.plist:
  uuid: 8B80A1DA-62C9-4864-A94D-5D1DDA7DBC77
  name: BundleMate

Commands/build.tmCommand:
  uuid: B568C8CE-86E3-45EB-B8BF-8D0A38A075AC
  name: Build bundle from source file
  scope: source.yaml_bundle
  keyEquivalent: @b
  command: '"${TM_RUBY:-ruby}" -rubygems "$TM_BUNDLE_SUPPORT/build.rb"'
  input: none
  output: showAsTooltip

Commands/build_and_reload.tmCommand:
  uuid: 597A0AEE-5B52-4836-9964-D908A5B4CB60
  name: Build then reload bundles
  scope: source.yaml_bundle
  keyEquivalent: @r
  command: '"${TM_RUBY:-ruby}" -rubygems "$TM_BUNDLE_SUPPORT/build_and_reload.rb"'
  input: none
  output: showAsTooltip

Commands/plist_to_yaml.tmCommand:
  uuid: E46F3CC9-C86B-4C66-B785-9A13BF2965B1
  name: Convert plist to YAML
  scope: text.xml.plist
  command: '"${TM_RUBY:-ruby}" -rubygems "$TM_BUNDLE_SUPPORT/plist_to_yaml.rb"'
  input: none
  output: openAsNewDocument

Preferences/Comments.tmPreferences:
  uuid: EDB8D2A0-6707-4A91-8A2A-98E90CE87A22
  name: Comments
  scope: source.yaml_bundle
  settings:
    shellVariables:
    - name: TM_COMMENT_START
      value: "# "

Preferences/file-list.plist:
  uuid: 2E0D5130-CEBB-4A80-BB06-B60ABF7A38AF
  name: "Symbol List: Files"
  scope: entity.name.file.yaml_bundle
  settings:
    showInSymbolList: 1
    symbolTransformation: s/:\s*\z//g;

Snippets/uuid_upper.plist:
  uuid: A3F62B98-D169-454F-992D-EA9C9D822185
  name: UUID - Uppercase
  tabTrigger: UUIDGEN
  content: `uuid`

Snippets/uuid_lower.plist:
  uuid: EC6EF13E-1226-494F-A10A-8610E1F560E0
  name: UUID - Lowercase
  tabTrigger: uuidgen
  content: `uuid | tr [A-Z] [a-z]`

Syntaxes/yaml_bundle.tmLanguage:
  uuid: 4B8FDF89-E042-46A8-9B41-DC7A3EBB335E
  # wish I could come up with a better name
  name: YAML Bundle Source
  scopeName: source.yaml_bundle
  fileTypes: [ 'SOURCE.yaml' ]
  keyEquivalent: ^~Y
  patterns:

  # comments
  - name: comment.line.number-sign.yaml_bundle
    # octothorpe where previous char was whitespace
    match: (?<=\s|^) (\#) (?!\{) .* $\n?
    captures:
      1: { name: punctuation.definition.comment. }

  # multi line key/regex pairs matchers
  #   this is a hack.
  #   1. The start of the first line that looks like key/val pair is
  #      treated as the end point. (it should be the char before)
  #   2. It's possible for the end pattern to match inside the regex unless
  #      you escape the ':' char. So do that.
  - begin: |
      (
        foldingStartMarker |
        foldingStopMarker |
        match |
        begin |
        end
      ) (\:) [ ] \| $
    end: ^ (?= \s* \w+ \:)
    contentName: string.regexp.oniguruma.
    beginCaptures:
      1: { name: support.constant. }
      2: { name: punctuation.separator.key-value. }
    patterns: [ { include: source.regexp.oniguruma } ]

  # file names
  - match: |
      ^(\S+?) (\:) \s* $
    captures:
      1: { name: entity.name.file. }
      2: { name: punctuation.separator.key-value. }

  # keys that have multi-line hashes or arrays as values
  - match: |
      (\s) (
        patterns |
        captures |
        beginCaptures |
        endCaptures |
        settings |
        shellVariables
      ) (\:) \s* $
    captures:
      2: { name: support.constant. }
      3: { name: punctuation.separator.key-value. }

  # single line key/regex pairs matchers
  - begin: |
      (
        foldingStartMarker |
        foldingStopMarker |
        match |
        begin |
        end |
        symbolTransformation
      ) (\:)
    end: $
    contentName: string.regexp.oniguruma.
    beginCaptures:
      1: { name: support.constant. }
      2: { name: punctuation.separator.key-value. }
    patterns: [ { include: source.regexp.oniguruma } ]

  # single line key/value pairs
  - name: meta.value-pair.
    contentName: string.
    begin: |
      ( uuid |
        scopeName |
        keyEquivalent |
        name |
        contentName |
        include |
        scope |
        value |
        input |
        output |
        command |
        showInSymbolList )
      (\:)
    end: (?= [\]\}\s]* $ )
    beginCaptures:
      1: { name: support.constant. }
      2: { name: punctuation.separator.key-value. }

  # single line key/value pairs
  - name: meta.value-pair.
    contentName: inline-array.
    begin: |
      ( patterns |
        fileTypes )
      (\:) \s+ (\[)
    end: (\]) \s* $
    beginCaptures:
      1: { name: support.constant. }
      2: { name: punctuation.separator.key-value. }
      3: { name: punctuation.section.array. }
    endCaptures:
      1: { name: punctuation.section.array. }
    patterns:
      - include: source.yaml_bundle
      - name: string.quoted.single.
        begin: \'
        end: \'